#heatmap
exp <- read.csv("count_gene.csv", header = T, row.names = 1)
difgene <- read.delim("difgene.txt", header = T, row.names = 2)
merged_df <- merge(exp,difgene , by = "row.names", all.y = TRUE) 
row.names(merged_df) <- merged_df[,1]
merged_df <- merged_df[,-1]
merged_df <- merged_df[, -ncol(merged_df)] 
data <- merged_df
data <- as.matrix(data)
samples <- rep(c('YNT', 'ENT',"YT","ET"), c(18,20,18,20)) 
for (i in 1:nrow(data)) 
  data[i, ] <- scale(log(unlist(data[i, ] + 1), 2))
Group = factor(rep(c('YNT', 'ONT',"YT","OT"),times = c(18,20,18,20)))
Group = factor(Group,levels = c('YNT', 'ENT',"YT","ET"))
library(ComplexHeatmap)
top_annotation = HeatmapAnnotation(cluster = anno_block(gp = gpar(fill = c("#FEE6CE","#C6DBEF","#FD8D3C","#2171B5")),
                                                        labels = c('YNT', 'ENT',"YT","ET"),
                                                        labels_gp = gpar(col = "black", fontsize = 12)))

genes=c("JUND","IFNGR1","IL1R2","TRBV12-4","TNFRSF1B",
        "TNFSF14","HLA-DOB","BATF2","CCL8","FOSL2",
        "TRAV8-2","IRF7",
        "FGFBP2","IFNG","IGHJ3",
        "EPCAM","AFP","CCNE1","IGFBPL1","CDH24",
        "MKI67","VEGFB","ICAM5","CDH6","VCAN",
        "IGF2","GDF15","FGF9","FGF1",
        "KRT19"
)
index=which(rownames(data) %in% genes)
labs=rownames(data)[index]
lab2=rowAnnotation(foo=anno_mark(at=index,
                                 labels=labs,
                                 labels_gp = gpar(fontsize = 5),
                                 lines_gp = gpar()
                                 ))
library(Cairo)
Heatmap( data,
         col = colorRampPalette(c("#2fa1dd", "white", "red"))(100),
         show_row_names = F,
         top_annotation = top_annotation,
         right_annotation = lab2,
         column_split = Group,
         column_title = NULL,
         show_column_names = F,
         cluster_columns = F, 
         show_row_dend = FALSE,
         use_raster=T)


#GO analysis
Enrichment_KEGGgo_analusis <- function(genes,
                                       species=c('human','mouse')){
  library(org.Hs.eg.db) 
  library(clusterProfiler)
  
  if(species == 'human'){
    
    genes_df <- bitr(genes, 
                     fromType="SYMBOL", 
                     toType="ENTREZID", 
                     OrgDb="org.Hs.eg.db", 
                     drop = TRUE) 
    
    organism = "hsa"
    OrgDb = org.Hs.eg.db
  }
  
  if(species == 'mouse'){
    
    genes_df <- bitr(genes, 
                     fromType="SYMBOL", 
                     toType="ENTREZID", 
                     OrgDb="org.Mm.eg.db", 
                     drop = TRUE) 
    organism = "mmu"
    OrgDb = org.Mm.eg.db
  }
  
  
  colnames(genes_df) <- c("gene","EntrzID")
  
  
  
  
  
  # KEGG
  kegg.re <- enrichKEGG(gene = genes_df$EntrzID, 
                        organism  = organism, 
                        keyType = "kegg",
                        pAdjustMethod = "fdr",
                        pvalueCutoff = 0.05, 
                        qvalueCutoff = 0.05, 
                        minGSSize = 10,
                        maxGSSize = 500)
  
  if (is.null(kegg.re)) {} else {kegg.re <- setReadable(kegg.re, OrgDb = OrgDb, keyType="ENTREZID")}
  print("kegg Done")
  
  # GO
  go.re1 <- enrichGO(gene = genes_df$EntrzID, 
                     keyType = "ENTREZID", 
                     OrgDb= OrgDb, 
                     ont="BP", 
                     pAdjustMethod = "fdr", 
                     pvalueCutoff  = 0.05, 
                     qvalueCutoff  = 0.05, 
                     minGSSize = 10,
                     maxGSSize = 500, 
                     readable = TRUE); 
  print("GOBP Done")
  
  go.re2 <- enrichGO(gene = genes_df$EntrzID, 
                     keyType = "ENTREZID", 
                     OrgDb= OrgDb, 
                     ont="CC", 
                     pAdjustMethod = "fdr", 
                     pvalueCutoff  = 0.05, 
                     qvalueCutoff  = 0.05, 
                     minGSSize = 10, 
                     maxGSSize = 500, 
                     readable = TRUE); 
  print("GOCC Done")
  
  go.re3 <- enrichGO(gene = genes_df$EntrzID, 
                     keyType = "ENTREZID", 
                     OrgDb= OrgDb, 
                     ont="MF", 
                     pAdjustMethod = "fdr",
                     pvalueCutoff  = 0.05, 
                     qvalueCutoff  = 0.05, 
                     minGSSize = 10, 
                     maxGSSize = 500, 
                     readable = TRUE); 
  print("GOMF Done")
  
  
  enrich_list <- list(kegg.re, go.re1, go.re2, go.re3)
  names(enrich_list) <- c("KEGG","GO_BP","GO_CC","GO_MF")
  return(enrich_list)
}

library(ggpubr)


dfown <- dfown %>% filter(log2FoldChange >0) %>% filter(pvalue < 0.05)


genes=dfown$gene


results <- Enrichment_KEGGgo_analusis(genes = genes,
                                      species = 'human')


BPown=results[["GO_BP"]]@result


data6 <- BPown %>% filter(Description %in% 
                           c("activation of immune response", 
                             "positive regulation of immune effector process",
                             "lymphocyte chemotaxis",
                             "immune response-activating signaling pathway",
                             "T cell differentiation involved in immune response",
                             "regulation of alpha-beta T cell proliferation",
                             "T cell cytokine production",
                             "leukocyte migration involved in inflammatory response",
                             "regulation of adaptive immune response",
                             "positive regulation of T cell receptor signaling pathway"
                           ))

data6 <- data6[order(-log10(data6$pvalue), decreasing = FALSE), ] 

ggplot(data6,aes(x=-log10(pvalue), y = reorder(Description, -log10(pvalue)), size=Count, col=-log10(pvalue),fill=-log10(pvalue))) + geom_point(shape=21)+ 
  theme_bw()+ scale_color_gradient(low = "#C6DBEF", high = "#2171B5")+ 
  scale_fill_gradient(low = "#C6DBEF", high = "#2171B5")





